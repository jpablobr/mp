#!/usr/bin/python
"""
Usage: vcprompt [options]

Version control information in your prompt.

Options:
  -f, --format FORMAT        The format string to use.
  -p, --path PATH            The path to run vcprompt on.
  -d, --max-depth DEPTH      The maximum number of directories to traverse.
  -s, --systems SYSTEMS      The version control systems to use.
  -u, --unknown UNKNOWN      The "unknown" value.
  -v, --version              Show program's version number and exit
  -h, --help                 Show this help message and exit

VCS-specific formatting:
  These options can be used for VCS-specific prompt formatting.

  --format-bzr FORMAT        Bazaar
  --format-cvs FORMAT        CVS
  --format-darcs FORMAT      Darcs
  --format-fossil FORMAT     Fossil
  --format-git FORMAT        Git
  --format-hg FORMAT         Mercurial
  --format-svn FORMAT        Subversion
"""

from subprocess import call, Popen, PIPE
from xml.dom.minidom import parseString
import optparse
import os
import re
import sys

try:
    import sqlite3
    has_sqlite3 = True
except ImportError:
    try:
        from pysqlite2 import dbapi2 as sqlite3
    except ImportError:
        has_sqlite3 = False

__version__ = (0, 1, 5)


# check to make sure the '--without-environment' flag is called first
# this could be done in a callback, but we'd have to keep a note of every
# option which is affected by this flag
if '--without-environment' in sys.argv and \
   sys.argv[1] != '--without-environment':
    output = "The '--without-environment' option must come before any "
    print >> sys.stderr, '%s other options.' % output
    sys.exit(1)

# we need to get this in early because callbacks are always called after
# every other option is already set, regardless of when the callback option
# is actually used in the script
if len(sys.argv) > 1 and sys.argv[1] == '--without-environment':
    for k in os.environ.keys():
        if k.startswith('VCPROMPT'):
            del os.environ[k]
    del sys.argv[1]


# user editable options
DEPTH = os.environ.get('VCPROMPT_DEPTH', 0)
FORMAT = os.environ.get('VCPROMPT_FORMAT', '%s:%b')
UNKNOWN = os.environ.get('VCPROMPT_UNKNOWN', '(unknown)')
SYSTEMS = []

# status indicators
MODIFIED = '+'
UNTRACKED = '?'


def helper(*args, **kwargs):
    """
    Prints the module's docstring.

    Doing this kills two birds with one stone: it adds PEP 257
    compliance and allows us to stop using optparse's built-in
    help flag.

    """
    print __doc__.strip()
    sys.exit(0)


def systems():
    """Prints all available systems to stdout."""
    for system in SYSTEMS:
        doc = system.__doc__.split('\n')
        name, desc = filter(bool, map(lambda x: x.strip(), doc))
        output = '%s: %s' % (name, desc)
        print output
    sys.exit(0)


def values(option, opt, value, parser, *args, **kwargs):
    """
    Prints the given values to stdout.

    This function is *private* and should not be relied on.
    """
    for option in parser.rargs:
        if option == 'SYSTEMS':
            systems()
        if option in globals().keys():
            print globals()[option]
    sys.exit(0)


def vcs(function):
    """
    Adds the given ``name`` and ``description`` as attributes on the
    wrapped function.

    Arguments:

        ``name``
            The display name for the system. E.g. "Mercurial" or
            "Subversion".

         ``description``
             The description for the system. E.g.:
             "The fast version continue system".

    """
    SYSTEMS.append(function)
    return function


def version(*args):
    """
    Convenience function for printing a version number.
    """
    print 'vcprompt %s' % '.'.join(map(str, __version__))
    sys.exit(0)


def vcprompt(path, formats, unknown, *args, **kwargs):
    """
    Returns a formatted version control string for use in a shell prompt
    or elsewhere.

    Arguments:

        ``path``
            A path for vcprompt to check for version control systems

            Defaults to the current working directory.

        ``formats``
            A dictionary mapping version control systems to formatting
            strings to use for said system.

            The default format key should be named 'default'.

         ``unknown``
             The string to use for when ``vcprompt`` cannot determine a
             value.

    Keyword Arguments:

        ``depth``
           The maximum number of directories that ``vcprompt`` will traverse
           in order to find a version control system.

           Defaults to 0 (no limit).


       ``systems``

           A list of systems for ``vcprompt`` to search for over the given
           ``path``.

           Defaults to all systems.

    """
    path = os.path.abspath(os.path.expanduser(path))
    depth = kwargs.get('depth', 0)
    systems = kwargs.get('systems', None)
    prompt = None
    count = 0

    while path:
        # We need to change the current working directory or the '--path'
        # flag might not work correctly with some formatting args.
        # It's easier to do this here, rather than in every VCS function
        if path != os.getcwd():
            os.chdir(path)

        for vcs in SYSTEMS:
            if not systems or systems and vcs.__name__ in systems:
                format = formats[vcs.__name__] or formats['default']
                prompt = vcs(path, format, unknown)
                if prompt is not None:
                    return prompt
        if depth:
            if count == depth:
                break
            count += 1

        path = path.rsplit('/', 1)[0]
    return ''


def main():
    # parser
    parser = optparse.OptionParser()

    # dump the provided --help option
    parser.remove_option('--help')

    # our own --help flag
    parser.add_option('-h', '--help', action='callback', callback=helper)

    # format
    parser.add_option('-f', '--format', dest='format', default=FORMAT)

    # path
    parser.add_option('-p', '--path', dest='path', default='.')

    # max depth
    parser.add_option('-d', '--max-depth', dest='depth', type='int',
                      default=DEPTH)
    # systems
    parser.add_option('-s', '--systems', dest='systems', action='append')

    # unknown
    parser.add_option('-u', '--unknown', dest='unknown', default=UNKNOWN)

    # version
    parser.add_option('-v', '--version', action='callback', callback=version)

    # values
    parser.add_option('--values', dest='values', action='callback',
                      callback=values)

    # vcs-specific formatting
    for system in SYSTEMS:
        default = 'VCPROMPT_FORMAT_%s' % system.__name__.upper()
        default = os.environ.get(default, None)
        dest = 'format-%s' % system.__name__
        flag = '--%s' % dest
        parser.add_option(flag, dest=dest, default=default)


    # parse!
    options, args = parser.parse_args()

    # break out formats into their own dictionary
    formats = {}
    for k, v in options.__dict__.items():
        if k.startswith('format'):
            k = k.split('format-')[-1]
            if k == 'format':
                k = 'default'
            formats[k] = v

    output = vcprompt(depth=options.depth, formats=formats, path=options.path,
                      systems=options.systems, unknown=options.unknown)

    return output


@vcs
def bzr(path, string, unknown):
    """
    Bazaar

    The Bazaar version control system
    """
    file = os.path.join(path, '.bzr/branch/last-revision')
    if not os.path.exists(file):
        return None

    branch = revision = hash = modified = untracked = unknown

    # local revision or global hash
    if re.search('%(r|h)', string):
        try:
            try:
                f = open(file, 'r')
                for line in f:
                    line = line.strip()
                    revision, hash = line.split(' ', 1)
                    # compensate for empty Bazaar repositories
                    if hash == 'null:':
                        hash = unknown
                    else:
                        hash = hash.rsplit('-', 1)[-1][:7]
                        break
            except IOError:
                pass
        finally:
            if f:
                f.close()

    # status (modified/untracked)
    if re.search('%[mu]', string):
        command = 'bzr status --short'
        process = Popen(command.split(), stdout=PIPE)
        output = process.communicate()[0].strip()
        returncode = process.returncode

        if returncode == 0:
            if output == '':
                modified = ''
                untracked = ''
            else:
                for line in output.split('\n'):
                    if line.startswith('M'):
                        modified = MODIFIED
                    elif line.startswith('?'):
                        untracked = UNTRACKED


    # formatting
    string = string.replace('%b', os.path.basename(path))
    string = string.replace('%h', hash)
    string = string.replace('%r', revision)
    string = string.replace('%m', modified)
    string = string.replace('%u', untracked)
    string = string.replace('%s', 'bzr')
    string = string.replace('%n', 'bzr')
    return string


@vcs
def cvs(path, string, unknown):
    """
    CVS

    Concurrent Versions System.
    """
    file = os.path.join(path, 'CVS/')
    if not os.path.exists(file):
        return None


    string = string.replace('%b', unknown)
    string = string.replace('%h', unknown)
    string = string.replace('%r', unknown)
    string = string.replace('%m', unknown)
    string = string.replace('%s', 'cvs')
    string = string.replace('%n', 'cvs')
    return string


@vcs
def darcs(path, string, unknown):
    """
    Darcs

    Distributed. Interactive. Smart.
    """
    file = os.path.join(path, '_darcs/hashed_inventory')
    if not os.path.exists(file):
        return None

    hash = branch = modified = untracked = unknown

    # hash
    if re.search('%(h|r)', string):
        command = 'darcs changes --last 1 --xml'
        process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if returncode == 0:
            dom = parseString(output)
            patch = dom.getElementsByTagName("patch")[0].getAttribute("hash")
            hash = patch.rsplit('-', 1)[-1].split('.')[0][:7]

    # branch
    # darcs doesn't have in-repo local branching (yet), so just use
    # the directory name for now
    # see also: http://bugs.darcs.net/issue555
    branch = os.path.basename(path)

    # modified
    if re.search('%[mu]', string):
        command = 'darcs whatsnew -l -s'
        process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if returncode == 1:
            modified = ''
            untracked = ''
        elif returncode == 0:
            for line in output:
                line = line.strip()
                if line.startswith('M'):
                    modified = MODIFIED
                elif line.startswith('a'):
                    untracked = UNTRACKED


    # formatting
    string = string.replace('%b', branch)
    string = string.replace('%h', hash)
    string = string.replace('%r', hash)
    string = string.replace('%m', modified)
    string = string.replace('%u', untracked)
    string = string.replace('%s', 'darcs')
    string = string.replace('%n', 'darcs')
    return string


@vcs
def fossil(path, string, unknown):
    """
    Fossil

    The Fossil version control system.
    """
    file = os.path.join(path, '_FOSSIL_')
    if not os.path.exists(file):
        return None

    branch = hash = modified = untracked = unknown

    # all this just to get the repository file :(
    repository = None
    if has_sqlite3:
        try:
            try:
                query = "SELECT value FROM vvar where name = 'repository'"
                conn = sqlite3.connect(file)
                c = conn.cursor()
                c.execute(query)
                repository = c.fetchone()[0]
            except sqlite3.OperationalError:
                pass
        finally:
            if conn:
                conn.close()

    # grab the hash from the repo
    if repository is not None and has_sqlite3:
        try:
            try:
                query = "SELECT uuid from blob ORDER BY rid DESC LIMIT 1"
                conn = sqlite3.connect(repository)
                c = conn.cursor()
                c.execute(query)
                hash = c.fetchone()[0][:7]
            except sqlite3.OperationalError:
                pass
        finally:
            if conn:
                conn.close()

    # branch
    if hash != unknown and has_sqlite3:
        try:
            try:
                query = """SELECT value FROM tagxref WHERE rid =
                           (SELECT rid FROM blob WHERE uuid LIKE '%s%%')
                           AND value is not NULL LIMIT 1 """ % hash
                conn = sqlite3.connect(repository)
                c = conn.cursor()
                c.execute(query)
                branch = c.fetchone()[0]
            except (sqlite3.OperationalError, TypeError):
                pass
        finally:
            if conn:
                conn.close()

    # modified
    if '%m' in string:
        command = 'fossil changes'
        process = Popen(command.split(), stdout=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if returncode == 0:
            if output:
                modified = MODIFIED
            else:
                modified = ''

    # untracked files
    if '%u' in string:
        command = 'fossil extras'
        process = Popen(command.split(), stdout=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if returncode == 0:
            if output:
                untracked = UNTRACKED
            else:
                untracked = ''

    # parse out formatting string
    string = string.replace('%b', branch)
    string = string.replace('%h', hash)
    string = string.replace('%r', hash)
    string = string.replace('%m', modified)
    string = string.replace('%u', untracked)
    string = string.replace('%s', 'fossil')
    string = string.replace('%n', 'fossil')
    return string


@vcs
def git(path, string, unknown):
    """
    Git

    The fast version control system.
    """
    file = os.path.join(path, '.git/')
    if not os.path.exists(file):
        return None

    branch = hash = modified = untracked = unknown

    # the current branch is required to get the hash
    if re.search('%(b|r|h)', string):
        branch_file = os.path.join(file, 'HEAD')
        try:
            try:
                f = open(branch_file, 'r')
                for line in f:
                    line = line.strip()
                    if re.match('^ref: refs/heads/', line):
                        branch = (line.split('/')[-1] or unknown)
                        break
            except IOError:
                pass
        finally:
            if f:
                f.close()

        # hash/revision
        if re.search('%(r|h)', string) and branch != unknown:
            hash_file = os.path.join(file, 'refs/heads/%s' % branch)
            if os.path.exists(hash_file):
                try:
                    try:
                        f = open(hash_file, 'r')
                        for line in f:
                            hash = line.strip()[0:7]
                            break
                    except IOError:
                        pass
                finally:
                    if f:
                        f.close()

    # modified
    if '%m' in string:
        command = 'git diff --diff-filter=M --exit-code'
        returncode = call(command, stdout=PIPE, stderr=PIPE, shell=True)

        if returncode == 1:
            modified = MODIFIED
        else:
            modified = ''

    # untracked files
    if '%u' in string:
        command = 'git ls-files --other --exclude-standard'
        process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if returncode == 0:
            if output == '':
                untracked = ''
            else:
                untracked = UNTRACKED

    # formatting
    string = string.replace('%b', branch)
    string = string.replace('%h', hash)
    string = string.replace('%r', hash)
    string = string.replace('%m', modified)
    string = string.replace('%u', untracked)
    string = string.replace('%s', 'git')
    string = string.replace('%n', 'git')
    return string


@vcs
def hg(path, string, unknown):
    """
    Mercurial

    The Mercurial version control system.
    """
    file = os.path.join(path, '.hg')
    if not os.path.isdir(file):
        return None

    branch = revision = hash = modified = untracked = unknown

    # changeset ID or global hash
    if re.search('%(r|h)', string):
        try:
            try:
                f = open(os.path.join(file, 'tags.cache'), 'r')
                for line in f:
                    revision, hash = line.strip().split()
                    hash = hash[:7]
                    break
            except IOError:
                pass
        finally:
            if f:
                f.close()

    # branch
    if '%b' in string:
        file = os.path.join(path, '.hg/undo.branch')
        try:
            try:
                f = open(file, 'r')
                for line in f:
                    branch = line.strip()
                    break
            except IOError:
                pass
        finally:
            if f:
                f.close()

    # modified
    if '%m' in string:
        command = 'hg status --modified'
        process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
        output = process.communicate()[0].strip()
        returncode = process.returncode

        if returncode == 0:
            if output == '':
                modified = ''
            else:
                modified = MODIFIED

    # untracked
    if '%u' in string:
        command = 'hg status --unknown'
        process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if output == '':
            untracked = ''
        else:
            untracked = UNTRACKED

    string = string.replace('%b', branch)
    string = string.replace('%h', hash)
    string = string.replace('%r', revision)
    string = string.replace('%m', modified)
    string = string.replace('%u', untracked)
    string = string.replace('%s', 'hg')
    string = string.replace('%n', 'hg')
    return string


@vcs
def svn(path, string, unknown):
    """
    Subversion

    The Subversion version control system.
    """
    file = os.path.join(path, '.svn/entries')
    if not os.path.exists(file):
        return None

    branch = revision = modified = untracked = unknown

    # branch
    command = 'svn info %s' % path
    process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
    output = process.communicate()[0]
    returncode = process.returncode

    if returncode == 0:
        # compile some regexes
        branch_regex = re.compile('((tags|branches)|trunk)')
        revision_regex = re.compile('^Revision: (?P<revision>\d+)')

        for line in output.split('\n'):
            # branch
            if '%b' in string:
                if re.match('URL:', line):
                    matches = re.search(branch_regex, line)
                    if matches:
                        branch = matches.groups(0)[0]

            # revision/hash
            if re.search('%(r|h)', string):
                if re.match('Revision:', line):
                    matches = re.search(revision_regex, line)
                    if 'revision' in matches.groupdict():
                        revision = matches.group('revision')

    # modified
    if re.search('%[mu]', string):
        command = 'svn status'
        process = Popen(command, shell=True, stdout=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if returncode == 0:
            if not output:
                modified = ''
                untracked = ''
            else:
                codes = [line[0] for line in output.split('\n') if line]
                if 'M' in codes:
                    modified = MODIFIED
                if '?' in codes:
                    untracked = UNTRACKED

    # formatting
    string = string.replace('%r', revision)
    string = string.replace('%h', revision)
    string = string.replace('%b', branch)
    string = string.replace('%m', modified)
    string = string.replace('%u', untracked)
    string = string.replace('%s', 'svn')
    string = string.replace('%n', 'svn')
    return string


if __name__ == '__main__':
    print main()
